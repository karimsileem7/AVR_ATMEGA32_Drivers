
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800060  00800060  00000858  2**0
                  ALLOC
  2 .stab         00000e10  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000668  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
  74:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinValue+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinValue+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinValue+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinValue+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinValue+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinValue+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  e8:	ab e3       	ldi	r26, 0x3B	; 59
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinValue+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinValue+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 112:	a8 e3       	ldi	r26, 0x38	; 56
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinValue+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinValue+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinValue+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinValue+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinValue+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinValue+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinValue+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinValue+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 1dc:	ab e3       	ldi	r26, 0x3B	; 59
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinValue+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 204:	a8 e3       	ldi	r26, 0x38	; 56
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 254:	a2 e3       	ldi	r26, 0x32	; 50
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e2 e3       	ldi	r30, 0x32	; 50
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinValue+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortValue+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortValue+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortValue+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortValue+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortValue+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortValue+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 310:	e2 e3       	ldi	r30, 0x32	; 50
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	27 97       	sbiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	5d 83       	std	Y+5, r21	; 0x05
 34a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 34c:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_u8GetPinValue+0x28>
 356:	78 c0       	rjmp	.+240    	; 0x448 <DIO_u8GetPinValue+0x118>
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_u8GetPinValue+0x30>
 35e:	74 c0       	rjmp	.+232    	; 0x448 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3f 83       	std	Y+7, r19	; 0x07
 368:	2e 83       	std	Y+6, r18	; 0x06
 36a:	4e 81       	ldd	r20, Y+6	; 0x06
 36c:	5f 81       	ldd	r21, Y+7	; 0x07
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	51 05       	cpc	r21, r1
 372:	59 f1       	breq	.+86     	; 0x3ca <DIO_u8GetPinValue+0x9a>
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	34 f4       	brge	.+12     	; 0x38a <DIO_u8GetPinValue+0x5a>
 37e:	2e 81       	ldd	r18, Y+6	; 0x06
 380:	3f 81       	ldd	r19, Y+7	; 0x07
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	69 f0       	breq	.+26     	; 0x3a2 <DIO_u8GetPinValue+0x72>
 388:	5c c0       	rjmp	.+184    	; 0x442 <DIO_u8GetPinValue+0x112>
 38a:	4e 81       	ldd	r20, Y+6	; 0x06
 38c:	5f 81       	ldd	r21, Y+7	; 0x07
 38e:	42 30       	cpi	r20, 0x02	; 2
 390:	51 05       	cpc	r21, r1
 392:	79 f1       	breq	.+94     	; 0x3f2 <DIO_u8GetPinValue+0xc2>
 394:	8e 81       	ldd	r24, Y+6	; 0x06
 396:	9f 81       	ldd	r25, Y+7	; 0x07
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_u8GetPinValue+0x70>
 39e:	3d c0       	rjmp	.+122    	; 0x41a <DIO_u8GetPinValue+0xea>
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
 3a2:	e9 e3       	ldi	r30, 0x39	; 57
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_u8GetPinValue+0x8a>
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_u8GetPinValue+0x86>
 3be:	ca 01       	movw	r24, r20
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	ec 81       	ldd	r30, Y+4	; 0x04
 3c4:	fd 81       	ldd	r31, Y+5	; 0x05
 3c6:	80 83       	st	Z, r24
 3c8:	41 c0       	rjmp	.+130    	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
 3ca:	e6 e3       	ldi	r30, 0x36	; 54
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8GetPinValue+0xb2>
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8GetPinValue+0xae>
 3e6:	ca 01       	movw	r24, r20
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	ec 81       	ldd	r30, Y+4	; 0x04
 3ec:	fd 81       	ldd	r31, Y+5	; 0x05
 3ee:	80 83       	st	Z, r24
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
 3f2:	e3 e3       	ldi	r30, 0x33	; 51
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8GetPinValue+0xda>
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8GetPinValue+0xd6>
 40e:	ca 01       	movw	r24, r20
 410:	81 70       	andi	r24, 0x01	; 1
 412:	ec 81       	ldd	r30, Y+4	; 0x04
 414:	fd 81       	ldd	r31, Y+5	; 0x05
 416:	80 83       	st	Z, r24
 418:	19 c0       	rjmp	.+50     	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
 41a:	e0 e3       	ldi	r30, 0x30	; 48
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8GetPinValue+0x102>
 42e:	55 95       	asr	r21
 430:	47 95       	ror	r20
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8GetPinValue+0xfe>
 436:	ca 01       	movw	r24, r20
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	ec 81       	ldd	r30, Y+4	; 0x04
 43c:	fd 81       	ldd	r31, Y+5	; 0x05
 43e:	80 83       	st	Z, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	27 96       	adiw	r28, 0x07	; 7
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 468:	af e5       	ldi	r26, 0x5F	; 95
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ef e5       	ldi	r30, 0x5F	; 95
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 68       	ori	r24, 0x80	; 128
 474:	8c 93       	st	X, r24
}
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 484:	af e5       	ldi	r26, 0x5F	; 95
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	ef e5       	ldi	r30, 0x5F	; 95
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8f 77       	andi	r24, 0x7F	; 127
 490:	8c 93       	st	X, r24
 492:	cf 91       	pop	r28
 494:	df 91       	pop	r29
 496:	08 95       	ret

00000498 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 4a0:	ea e3       	ldi	r30, 0x3A	; 58
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	87 e0       	ldi	r24, 0x07	; 7
 4a6:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
 4a8:	e7 e3       	ldi	r30, 0x37	; 55
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 4ae:	e4 e3       	ldi	r30, 0x34	; 52
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
 4b4:	e1 e3       	ldi	r30, 0x31	; 49
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
 4ba:	eb e3       	ldi	r30, 0x3B	; 59
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
 4c0:	e8 e3       	ldi	r30, 0x38	; 56
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
 4c6:	e5 e3       	ldi	r30, 0x35	; 53
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
 4cc:	e2 e3       	ldi	r30, 0x32	; 50
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	10 82       	st	Z, r1
 4d2:	cf 91       	pop	r28
 4d4:	df 91       	pop	r29
 4d6:	08 95       	ret

000004d8 <RTOS_voidCreateTask>:

Task_t SystemTasks [TASK_NUM]= {{NULL}};


void RTOS_voidCreateTask(u8 Copy_u8Priority, u16 Copy_u16Periodicity,void (*Copy_pvTaskFunc)(void))
{
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	00 d0       	rcall	.+0      	; 0x4de <RTOS_voidCreateTask+0x6>
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <RTOS_voidCreateTask+0x8>
 4e0:	0f 92       	push	r0
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	89 83       	std	Y+1, r24	; 0x01
 4e8:	7b 83       	std	Y+3, r23	; 0x03
 4ea:	6a 83       	std	Y+2, r22	; 0x02
 4ec:	5d 83       	std	Y+5, r21	; 0x05
 4ee:	4c 83       	std	Y+4, r20	; 0x04
	SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	fc 01       	movw	r30, r24
 500:	e0 5a       	subi	r30, 0xA0	; 160
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	9b 81       	ldd	r25, Y+3	; 0x03
 508:	91 83       	std	Z+1, r25	; 0x01
 50a:	80 83       	st	Z, r24
	SystemTasks[Copy_u8Priority].TaskFunc = Copy_pvTaskFunc;
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	fc 01       	movw	r30, r24
 51e:	e0 5a       	subi	r30, 0xA0	; 160
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	8c 81       	ldd	r24, Y+4	; 0x04
 524:	9d 81       	ldd	r25, Y+5	; 0x05
 526:	91 83       	std	Z+1, r25	; 0x01
 528:	80 83       	st	Z, r24
}
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	cf 91       	pop	r28
 536:	df 91       	pop	r29
 538:	08 95       	ret

0000053a <RTOS_voidStart>:

void RTOS_voidStart(void)
{
 53a:	df 93       	push	r29
 53c:	cf 93       	push	r28
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8SetCallBack(&Scheduler);
 542:	8a ea       	ldi	r24, 0xAA	; 170
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER0_u8SetCallBack>
	TIMER0_voidInit();
 54a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TIMER0_voidInit>
}
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <Scheduler>:

static void Scheduler(void)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	0f 92       	push	r0
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	u8 Local_u8TaskCounter;

	/*Increment the scheduler counter*/
	Local_u16Counter++;
 55e:	80 91 6c 00 	lds	r24, 0x006C
 562:	90 91 6d 00 	lds	r25, 0x006D
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	90 93 6d 00 	sts	0x006D, r25
 56c:	80 93 6c 00 	sts	0x006C, r24
	
	for(Local_u8TaskCounter =0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
 570:	19 82       	std	Y+1, r1	; 0x01
 572:	37 c0       	rjmp	.+110    	; 0x5e2 <Scheduler+0x8e>
	{
		if((Local_u16Counter % SystemTasks[Local_u8TaskCounter].Periodicity)==0)
 574:	40 91 6c 00 	lds	r20, 0x006C
 578:	50 91 6d 00 	lds	r21, 0x006D
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	fc 01       	movw	r30, r24
 58c:	e0 5a       	subi	r30, 0xA0	; 160
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	20 81       	ld	r18, Z
 592:	31 81       	ldd	r19, Z+1	; 0x01
 594:	ca 01       	movw	r24, r20
 596:	b9 01       	movw	r22, r18
 598:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__udivmodhi4>
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	f1 f4       	brne	.+60     	; 0x5dc <Scheduler+0x88>
		{
			/*Invoke the task function*/
			if(SystemTasks[Local_u8TaskCounter].TaskFunc!=NULL)
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	fc 01       	movw	r30, r24
 5b2:	e0 5a       	subi	r30, 0xA0	; 160
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	80 81       	ld	r24, Z
 5b8:	91 81       	ldd	r25, Z+1	; 0x01
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	79 f0       	breq	.+30     	; 0x5dc <Scheduler+0x88>
			{
				SystemTasks[Local_u8TaskCounter].TaskFunc();
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	88 2f       	mov	r24, r24
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	fc 01       	movw	r30, r24
 5d0:	e0 5a       	subi	r30, 0xA0	; 160
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	01 90       	ld	r0, Z+
 5d6:	f0 81       	ld	r31, Z
 5d8:	e0 2d       	mov	r30, r0
 5da:	09 95       	icall
	u8 Local_u8TaskCounter;

	/*Increment the scheduler counter*/
	Local_u16Counter++;
	
	for(Local_u8TaskCounter =0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	83 30       	cpi	r24, 0x03	; 3
 5e6:	30 f2       	brcs	.-116    	; 0x574 <Scheduler+0x20>
			{
				SystemTasks[Local_u8TaskCounter].TaskFunc();
			}
		}
	}
}
 5e8:	0f 90       	pop	r0
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <TIMER0_voidInit>:
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
	/*Choose CTC Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 5f8:	a3 e5       	ldi	r26, 0x53	; 83
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e3 e5       	ldi	r30, 0x53	; 83
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	8f 7b       	andi	r24, 0xBF	; 191
 604:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
 606:	a3 e5       	ldi	r26, 0x53	; 83
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e3 e5       	ldi	r30, 0x53	; 83
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	88 60       	ori	r24, 0x08	; 8
 612:	8c 93       	st	X, r24

	/*Set compare match value to 125 for 1ms compare time*/
	OCR0=125;
 614:	ec e5       	ldi	r30, 0x5C	; 92
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	8d e7       	ldi	r24, 0x7D	; 125
 61a:	80 83       	st	Z, r24

	/*Compare match interrupt enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
 61c:	a9 e5       	ldi	r26, 0x59	; 89
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e9 e5       	ldi	r30, 0x59	; 89
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	82 60       	ori	r24, 0x02	; 2
 628:	8c 93       	st	X, r24

	/*Precaler: Division by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
 62a:	a3 e5       	ldi	r26, 0x53	; 83
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	e3 e5       	ldi	r30, 0x53	; 83
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	81 60       	ori	r24, 0x01	; 1
 636:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
 638:	a3 e5       	ldi	r26, 0x53	; 83
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e3 e5       	ldi	r30, 0x53	; 83
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	82 60       	ori	r24, 0x02	; 2
 644:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
 646:	a3 e5       	ldi	r26, 0x53	; 83
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e3 e5       	ldi	r30, 0x53	; 83
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	8b 7f       	andi	r24, 0xFB	; 251
 652:	8c 93       	st	X, r24
}
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	00 d0       	rcall	.+0      	; 0x660 <TIMER0_u8SetCallBack+0x6>
 660:	0f 92       	push	r0
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	9b 83       	std	Y+3, r25	; 0x03
 668:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 66a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	9b 81       	ldd	r25, Y+3	; 0x03
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	39 f0       	breq	.+14     	; 0x682 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc= Copy_pvCallBackFunc;
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	9b 81       	ldd	r25, Y+3	; 0x03
 678:	90 93 6f 00 	sts	0x006F, r25
 67c:	80 93 6e 00 	sts	0x006E, r24
 680:	02 c0       	rjmp	.+4      	; 0x686 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
 686:	89 81       	ldd	r24, Y+1	; 0x01
}
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	cf 91       	pop	r28
 690:	df 91       	pop	r29
 692:	08 95       	ret

00000694 <__vector_10>:

/*CTC ISR*/
void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!= NULL)
 6be:	80 91 6e 00 	lds	r24, 0x006E
 6c2:	90 91 6f 00 	lds	r25, 0x006F
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	29 f0       	breq	.+10     	; 0x6d4 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
 6ca:	e0 91 6e 00 	lds	r30, 0x006E
 6ce:	f0 91 6f 00 	lds	r31, 0x006F
 6d2:	09 95       	icall
	}
}
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <main>:
void LED1(void);
void LED2(void);
void LED3(void);

void main(void)
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 702:	0e 94 4c 02 	call	0x498	; 0x498 <PORT_voidInit>
	GIE_voidEnable();
 706:	0e 94 30 02 	call	0x460	; 0x460 <GIE_voidEnable>

	RTOS_voidCreateTask(0,500,&LED1);
 70a:	20 ea       	ldi	r18, 0xA0	; 160
 70c:	33 e0       	ldi	r19, 0x03	; 3
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	64 ef       	ldi	r22, 0xF4	; 244
 712:	71 e0       	ldi	r23, 0x01	; 1
 714:	a9 01       	movw	r20, r18
 716:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(1,1000,&LED2);
 71a:	24 eb       	ldi	r18, 0xB4	; 180
 71c:	33 e0       	ldi	r19, 0x03	; 3
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	68 ee       	ldi	r22, 0xE8	; 232
 722:	73 e0       	ldi	r23, 0x03	; 3
 724:	a9 01       	movw	r20, r18
 726:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(2,1500,&LED3);
 72a:	28 ec       	ldi	r18, 0xC8	; 200
 72c:	33 e0       	ldi	r19, 0x03	; 3
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	6c ed       	ldi	r22, 0xDC	; 220
 732:	75 e0       	ldi	r23, 0x05	; 5
 734:	a9 01       	movw	r20, r18
 736:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <RTOS_voidCreateTask>

	RTOS_voidStart();
 73a:	0e 94 9d 02 	call	0x53a	; 0x53a <RTOS_voidStart>
 73e:	ff cf       	rjmp	.-2      	; 0x73e <main+0x44>

00000740 <LED1>:

	}
}

void LED1(void)
{
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
	static u8 LedState=0;
	TOGGLE_BIT(LedState,0);
 748:	90 91 70 00 	lds	r25, 0x0070
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	89 27       	eor	r24, r25
 750:	80 93 70 00 	sts	0x0070, r24
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,LedState);
 754:	90 91 70 00 	lds	r25, 0x0070
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	49 2f       	mov	r20, r25
 75e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>

}
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <LED2>:
void LED2(void)
{
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
	static u8 LedState=0;
	TOGGLE_BIT(LedState,0);
 770:	90 91 71 00 	lds	r25, 0x0071
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	89 27       	eor	r24, r25
 778:	80 93 71 00 	sts	0x0071, r24
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,LedState);
 77c:	90 91 71 00 	lds	r25, 0x0071
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	61 e0       	ldi	r22, 0x01	; 1
 784:	49 2f       	mov	r20, r25
 786:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	08 95       	ret

00000790 <LED3>:
void LED3(void)
{
 790:	df 93       	push	r29
 792:	cf 93       	push	r28
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	static u8 LedState=0;
	TOGGLE_BIT(LedState,0);
 798:	90 91 72 00 	lds	r25, 0x0072
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	89 27       	eor	r24, r25
 7a0:	80 93 72 00 	sts	0x0072, r24
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,LedState);
 7a4:	90 91 72 00 	lds	r25, 0x0072
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	62 e0       	ldi	r22, 0x02	; 2
 7ac:	49 2f       	mov	r20, r25
 7ae:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <__udivmodhi4>:
 7b8:	aa 1b       	sub	r26, r26
 7ba:	bb 1b       	sub	r27, r27
 7bc:	51 e1       	ldi	r21, 0x11	; 17
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <__udivmodhi4_ep>

000007c0 <__udivmodhi4_loop>:
 7c0:	aa 1f       	adc	r26, r26
 7c2:	bb 1f       	adc	r27, r27
 7c4:	a6 17       	cp	r26, r22
 7c6:	b7 07       	cpc	r27, r23
 7c8:	10 f0       	brcs	.+4      	; 0x7ce <__udivmodhi4_ep>
 7ca:	a6 1b       	sub	r26, r22
 7cc:	b7 0b       	sbc	r27, r23

000007ce <__udivmodhi4_ep>:
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	5a 95       	dec	r21
 7d4:	a9 f7       	brne	.-22     	; 0x7c0 <__udivmodhi4_loop>
 7d6:	80 95       	com	r24
 7d8:	90 95       	com	r25
 7da:	bc 01       	movw	r22, r24
 7dc:	cd 01       	movw	r24, r26
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
