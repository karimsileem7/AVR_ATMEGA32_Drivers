
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000822  2**0
                  ALLOC
  2 .stab         00000c6c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005b6  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b5 03 	call	0x76a	; 0x76a <main>
  74:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static void (*ADC_pvCallBackNotificationFunc)(void)=NULL;

u8 ADC_u8BusyState= IDLE;

void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8c 93       	st	X, r24

	/*Activate Left adjust result*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24

	/*Set Prescaler to divide by 128*/
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u8* Copy_pu8Reading)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	8e 83       	std	Y+6, r24	; 0x06
 102:	78 87       	std	Y+8, r23	; 0x08
 104:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
 106:	1a 82       	std	Y+2, r1	; 0x02
 108:	1b 82       	std	Y+3, r1	; 0x03
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
 10e:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
 110:	80 91 64 00 	lds	r24, 0x0064
 114:	88 23       	and	r24, r24
 116:	09 f0       	breq	.+2      	; 0x11a <ADC_u8StartConversionSynch+0x2e>
 118:	5b c0       	rjmp	.+182    	; 0x1d0 <ADC_u8StartConversionSynch+0xe4>
	{
		/*ADC is now busy*/
		ADC_u8BusyState= BUSY;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 64 00 	sts	0x0064, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
 120:	a7 e2       	ldi	r26, 0x27	; 39
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e7 e2       	ldi	r30, 0x27	; 39
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 7e       	andi	r24, 0xE0	; 224
 12c:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX|= Copy_u8Channel;
 12e:	a7 e2       	ldi	r26, 0x27	; 39
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e2       	ldi	r30, 0x27	; 39
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	8e 81       	ldd	r24, Y+6	; 0x06
 13a:	89 2b       	or	r24, r25
 13c:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
 13e:	a6 e2       	ldi	r26, 0x26	; 38
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e6 e2       	ldi	r30, 0x26	; 38
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8c 93       	st	X, r24
 14c:	0b c0       	rjmp	.+22     	; 0x164 <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
		{
			Local_u32Counter++;
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	9b 81       	ldd	r25, Y+3	; 0x03
 152:	ac 81       	ldd	r26, Y+4	; 0x04
 154:	bd 81       	ldd	r27, Y+5	; 0x05
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	a1 1d       	adc	r26, r1
 15a:	b1 1d       	adc	r27, r1
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	ac 83       	std	Y+4, r26	; 0x04
 162:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
 164:	e6 e2       	ldi	r30, 0x26	; 38
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 95       	swap	r24
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	81 70       	andi	r24, 0x01	; 1
 174:	90 70       	andi	r25, 0x00	; 0
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	61 f4       	brne	.+24     	; 0x192 <ADC_u8StartConversionSynch+0xa6>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	9b 81       	ldd	r25, Y+3	; 0x03
 17e:	ac 81       	ldd	r26, Y+4	; 0x04
 180:	bd 81       	ldd	r27, Y+5	; 0x05
 182:	80 35       	cpi	r24, 0x50	; 80
 184:	23 ec       	ldi	r18, 0xC3	; 195
 186:	92 07       	cpc	r25, r18
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	a2 07       	cpc	r26, r18
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	b2 07       	cpc	r27, r18
 190:	f1 f6       	brne	.-68     	; 0x14e <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter== ADC_u32TIMEOUT)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	ac 81       	ldd	r26, Y+4	; 0x04
 198:	bd 81       	ldd	r27, Y+5	; 0x05
 19a:	80 35       	cpi	r24, 0x50	; 80
 19c:	23 ec       	ldi	r18, 0xC3	; 195
 19e:	92 07       	cpc	r25, r18
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	a2 07       	cpc	r26, r18
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	b2 07       	cpc	r27, r18
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <ADC_u8StartConversionSynch+0xe8>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
 1b0:	a6 e2       	ldi	r26, 0x26	; 38
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e6 e2       	ldi	r30, 0x26	; 38
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8c 93       	st	X, r24

			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
 1be:	e5 e2       	ldi	r30, 0x25	; 37
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	ef 81       	ldd	r30, Y+7	; 0x07
 1c6:	f8 85       	ldd	r31, Y+8	; 0x08
 1c8:	80 83       	st	Z, r24

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
 1ca:	10 92 64 00 	sts	0x0064, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <ADC_u8StartConversionSynch+0xe8>
		}
	}
		else
		{
			Local_u8ErrorState= BUSY_FUNC;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d6:	28 96       	adiw	r28, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <ADC_u8StartConversionAsynch+0x6>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <ADC_u8StartConversionAsynch+0x8>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <ADC_u8StartConversionAsynch+0xa>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	7c 83       	std	Y+4, r23	; 0x04
 1fa:	6b 83       	std	Y+3, r22	; 0x03
 1fc:	5e 83       	std	Y+6, r21	; 0x06
 1fe:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
 200:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState== IDLE)
 202:	80 91 64 00 	lds	r24, 0x0064
 206:	88 23       	and	r24, r24
 208:	c1 f5       	brne	.+112    	; 0x27a <ADC_u8StartConversionAsynch+0x92>
	{
		if((Copy_pu8Reading ==NULL) || (Copy_pvNotificationFunc == NULL))
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	9c 81       	ldd	r25, Y+4	; 0x04
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	21 f0       	breq	.+8      	; 0x21a <ADC_u8StartConversionAsynch+0x32>
 212:	8d 81       	ldd	r24, Y+5	; 0x05
 214:	9e 81       	ldd	r25, Y+6	; 0x06
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	19 f4       	brne	.+6      	; 0x220 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState= NULL_POINTER;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	2f c0       	rjmp	.+94     	; 0x27e <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 64 00 	sts	0x0064, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	90 93 61 00 	sts	0x0061, r25
 22e:	80 93 60 00 	sts	0x0060, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc= Copy_pvNotificationFunc;
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	90 93 63 00 	sts	0x0063, r25
 23a:	80 93 62 00 	sts	0x0062, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
 23e:	a7 e2       	ldi	r26, 0x27	; 39
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e7 e2       	ldi	r30, 0x27	; 39
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 7e       	andi	r24, 0xE0	; 224
 24a:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX|= Copy_u8Channel;
 24c:	a7 e2       	ldi	r26, 0x27	; 39
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e7 e2       	ldi	r30, 0x27	; 39
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	89 2b       	or	r24, r25
 25a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 25c:	a6 e2       	ldi	r26, 0x26	; 38
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e6 e2       	ldi	r30, 0x26	; 38
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	80 64       	ori	r24, 0x40	; 64
 268:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 26a:	a6 e2       	ldi	r26, 0x26	; 38
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e6 e2       	ldi	r30, 0x26	; 38
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 60       	ori	r24, 0x08	; 8
 276:	8c 93       	st	X, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <ADC_u8StartConversionAsynch+0x96>
		}
	}
	else
	{
		Local_uErrorState= BUSY_FUNC;
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uErrorState;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
}
 280:	26 96       	adiw	r28, 0x06	; 6
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <__vector_16>:

void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	/*Read ADC result*/
	*ADC_pu8Reading= ADCH;
 2bc:	a0 91 60 00 	lds	r26, 0x0060
 2c0:	b0 91 61 00 	lds	r27, 0x0061
 2c4:	e5 e2       	ldi	r30, 0x25	; 37
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	8c 93       	st	X, r24

	/*Make ADC state be IDLE because it finished*/
	ADC_u8BusyState=IDLE;
 2cc:	10 92 64 00 	sts	0x0064, r1

	/*Invoke the callback notification function*/
	ADC_pvCallBackNotificationFunc();
 2d0:	e0 91 62 00 	lds	r30, 0x0062
 2d4:	f0 91 63 00 	lds	r31, 0x0063
 2d8:	09 95       	icall

	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
 2da:	a6 e2       	ldi	r26, 0x26	; 38
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e6 e2       	ldi	r30, 0x26	; 38
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	8c 93       	st	X, r24
}
 2e8:	cf 91       	pop	r28
 2ea:	df 91       	pop	r29
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	28 97       	sbiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	8a 83       	std	Y+2, r24	; 0x02
 324:	6b 83       	std	Y+3, r22	; 0x03
 326:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 328:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	08 f0       	brcs	.+2      	; 0x332 <DIO_u8SetPinValue+0x24>
 330:	f4 c0       	rjmp	.+488    	; 0x51a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 332:	8c 81       	ldd	r24, Y+4	; 0x04
 334:	88 23       	and	r24, r24
 336:	09 f0       	breq	.+2      	; 0x33a <DIO_u8SetPinValue+0x2c>
 338:	77 c0       	rjmp	.+238    	; 0x428 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	38 87       	std	Y+8, r19	; 0x08
 342:	2f 83       	std	Y+7, r18	; 0x07
 344:	8f 81       	ldd	r24, Y+7	; 0x07
 346:	98 85       	ldd	r25, Y+8	; 0x08
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 05       	cpc	r25, r1
 34c:	59 f1       	breq	.+86     	; 0x3a4 <DIO_u8SetPinValue+0x96>
 34e:	2f 81       	ldd	r18, Y+7	; 0x07
 350:	38 85       	ldd	r19, Y+8	; 0x08
 352:	22 30       	cpi	r18, 0x02	; 2
 354:	31 05       	cpc	r19, r1
 356:	2c f4       	brge	.+10     	; 0x362 <DIO_u8SetPinValue+0x54>
 358:	8f 81       	ldd	r24, Y+7	; 0x07
 35a:	98 85       	ldd	r25, Y+8	; 0x08
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	69 f0       	breq	.+26     	; 0x37a <DIO_u8SetPinValue+0x6c>
 360:	60 c0       	rjmp	.+192    	; 0x422 <DIO_u8SetPinValue+0x114>
 362:	2f 81       	ldd	r18, Y+7	; 0x07
 364:	38 85       	ldd	r19, Y+8	; 0x08
 366:	22 30       	cpi	r18, 0x02	; 2
 368:	31 05       	cpc	r19, r1
 36a:	89 f1       	breq	.+98     	; 0x3ce <DIO_u8SetPinValue+0xc0>
 36c:	8f 81       	ldd	r24, Y+7	; 0x07
 36e:	98 85       	ldd	r25, Y+8	; 0x08
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	91 05       	cpc	r25, r1
 374:	09 f4       	brne	.+2      	; 0x378 <DIO_u8SetPinValue+0x6a>
 376:	40 c0       	rjmp	.+128    	; 0x3f8 <DIO_u8SetPinValue+0xea>
 378:	54 c0       	rjmp	.+168    	; 0x422 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 37a:	ab e3       	ldi	r26, 0x3B	; 59
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	eb e3       	ldi	r30, 0x3B	; 59
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_u8SetPinValue+0x8a>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_u8SetPinValue+0x86>
 39c:	80 95       	com	r24
 39e:	84 23       	and	r24, r20
 3a0:	8c 93       	st	X, r24
 3a2:	bd c0       	rjmp	.+378    	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 3a4:	a8 e3       	ldi	r26, 0x38	; 56
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e8 e3       	ldi	r30, 0x38	; 56
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	48 2f       	mov	r20, r24
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 2e       	mov	r0, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8SetPinValue+0xb4>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8SetPinValue+0xb0>
 3c6:	80 95       	com	r24
 3c8:	84 23       	and	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	a8 c0       	rjmp	.+336    	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 3ce:	a5 e3       	ldi	r26, 0x35	; 53
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e5 e3       	ldi	r30, 0x35	; 53
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0xde>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0xda>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	93 c0       	rjmp	.+294    	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 3f8:	a2 e3       	ldi	r26, 0x32	; 50
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e2 e3       	ldi	r30, 0x32	; 50
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8SetPinValue+0x108>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8SetPinValue+0x104>
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	8c 93       	st	X, r24
 420:	7e c0       	rjmp	.+252    	; 0x51e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	89 83       	std	Y+1, r24	; 0x01
 426:	7b c0       	rjmp	.+246    	; 0x51e <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	09 f0       	breq	.+2      	; 0x430 <DIO_u8SetPinValue+0x122>
 42e:	72 c0       	rjmp	.+228    	; 0x514 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	3e 83       	std	Y+6, r19	; 0x06
 438:	2d 83       	std	Y+5, r18	; 0x05
 43a:	8d 81       	ldd	r24, Y+5	; 0x05
 43c:	9e 81       	ldd	r25, Y+6	; 0x06
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 05       	cpc	r25, r1
 442:	49 f1       	breq	.+82     	; 0x496 <DIO_u8SetPinValue+0x188>
 444:	2d 81       	ldd	r18, Y+5	; 0x05
 446:	3e 81       	ldd	r19, Y+6	; 0x06
 448:	22 30       	cpi	r18, 0x02	; 2
 44a:	31 05       	cpc	r19, r1
 44c:	2c f4       	brge	.+10     	; 0x458 <DIO_u8SetPinValue+0x14a>
 44e:	8d 81       	ldd	r24, Y+5	; 0x05
 450:	9e 81       	ldd	r25, Y+6	; 0x06
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	61 f0       	breq	.+24     	; 0x46e <DIO_u8SetPinValue+0x160>
 456:	5b c0       	rjmp	.+182    	; 0x50e <DIO_u8SetPinValue+0x200>
 458:	2d 81       	ldd	r18, Y+5	; 0x05
 45a:	3e 81       	ldd	r19, Y+6	; 0x06
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	71 f1       	breq	.+92     	; 0x4be <DIO_u8SetPinValue+0x1b0>
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	91 05       	cpc	r25, r1
 46a:	e9 f1       	breq	.+122    	; 0x4e6 <DIO_u8SetPinValue+0x1d8>
 46c:	50 c0       	rjmp	.+160    	; 0x50e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 46e:	ab e3       	ldi	r26, 0x3B	; 59
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	eb e3       	ldi	r30, 0x3B	; 59
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	48 2f       	mov	r20, r24
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 2e       	mov	r0, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_u8SetPinValue+0x17e>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_u8SetPinValue+0x17a>
 490:	84 2b       	or	r24, r20
 492:	8c 93       	st	X, r24
 494:	44 c0       	rjmp	.+136    	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 496:	a8 e3       	ldi	r26, 0x38	; 56
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e8 e3       	ldi	r30, 0x38	; 56
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_u8SetPinValue+0x1a6>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_u8SetPinValue+0x1a2>
 4b8:	84 2b       	or	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	30 c0       	rjmp	.+96     	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 4be:	a5 e3       	ldi	r26, 0x35	; 53
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e5 e3       	ldi	r30, 0x35	; 53
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8SetPinValue+0x1ce>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8SetPinValue+0x1ca>
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	1c c0       	rjmp	.+56     	; 0x51e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 4e6:	a2 e3       	ldi	r26, 0x32	; 50
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e2 e3       	ldi	r30, 0x32	; 50
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_u8SetPinValue+0x1f6>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_u8SetPinValue+0x1f2>
 508:	84 2b       	or	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	08 c0       	rjmp	.+16     	; 0x51e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	89 83       	std	Y+1, r24	; 0x01
 512:	05 c0       	rjmp	.+10     	; 0x51e <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 51e:	89 81       	ldd	r24, Y+1	; 0x01
}
 520:	28 96       	adiw	r28, 0x08	; 8
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <DIO_u8SetPortValue+0x6>
 538:	00 d0       	rcall	.+0      	; 0x53a <DIO_u8SetPortValue+0x8>
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	8a 83       	std	Y+2, r24	; 0x02
 542:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 544:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3d 83       	std	Y+5, r19	; 0x05
 54e:	2c 83       	std	Y+4, r18	; 0x04
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	d1 f0       	breq	.+52     	; 0x58e <DIO_u8SetPortValue+0x5c>
 55a:	2c 81       	ldd	r18, Y+4	; 0x04
 55c:	3d 81       	ldd	r19, Y+5	; 0x05
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	31 05       	cpc	r19, r1
 562:	2c f4       	brge	.+10     	; 0x56e <DIO_u8SetPortValue+0x3c>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	61 f0       	breq	.+24     	; 0x584 <DIO_u8SetPortValue+0x52>
 56c:	1f c0       	rjmp	.+62     	; 0x5ac <DIO_u8SetPortValue+0x7a>
 56e:	2c 81       	ldd	r18, Y+4	; 0x04
 570:	3d 81       	ldd	r19, Y+5	; 0x05
 572:	22 30       	cpi	r18, 0x02	; 2
 574:	31 05       	cpc	r19, r1
 576:	81 f0       	breq	.+32     	; 0x598 <DIO_u8SetPortValue+0x66>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	9d 81       	ldd	r25, Y+5	; 0x05
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	91 05       	cpc	r25, r1
 580:	81 f0       	breq	.+32     	; 0x5a2 <DIO_u8SetPortValue+0x70>
 582:	14 c0       	rjmp	.+40     	; 0x5ac <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 584:	eb e3       	ldi	r30, 0x3B	; 59
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	80 83       	st	Z, r24
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 58e:	e8 e3       	ldi	r30, 0x38	; 56
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	80 83       	st	Z, r24
 596:	0c c0       	rjmp	.+24     	; 0x5b0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 598:	e5 e3       	ldi	r30, 0x35	; 53
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	80 83       	st	Z, r24
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 5a2:	e2 e3       	ldi	r30, 0x32	; 50
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	80 83       	st	Z, r24
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	08 95       	ret

000005c2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	27 97       	sbiw	r28, 0x07	; 7
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	8a 83       	std	Y+2, r24	; 0x02
 5d8:	6b 83       	std	Y+3, r22	; 0x03
 5da:	5d 83       	std	Y+5, r21	; 0x05
 5dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 5de:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
 5e0:	8c 81       	ldd	r24, Y+4	; 0x04
 5e2:	9d 81       	ldd	r25, Y+5	; 0x05
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	09 f4       	brne	.+2      	; 0x5ea <DIO_u8GetPinValue+0x28>
 5e8:	78 c0       	rjmp	.+240    	; 0x6da <DIO_u8GetPinValue+0x118>
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	88 30       	cpi	r24, 0x08	; 8
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <DIO_u8GetPinValue+0x30>
 5f0:	74 c0       	rjmp	.+232    	; 0x6da <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	3f 83       	std	Y+7, r19	; 0x07
 5fa:	2e 83       	std	Y+6, r18	; 0x06
 5fc:	4e 81       	ldd	r20, Y+6	; 0x06
 5fe:	5f 81       	ldd	r21, Y+7	; 0x07
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	51 05       	cpc	r21, r1
 604:	59 f1       	breq	.+86     	; 0x65c <DIO_u8GetPinValue+0x9a>
 606:	8e 81       	ldd	r24, Y+6	; 0x06
 608:	9f 81       	ldd	r25, Y+7	; 0x07
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	91 05       	cpc	r25, r1
 60e:	34 f4       	brge	.+12     	; 0x61c <DIO_u8GetPinValue+0x5a>
 610:	2e 81       	ldd	r18, Y+6	; 0x06
 612:	3f 81       	ldd	r19, Y+7	; 0x07
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	69 f0       	breq	.+26     	; 0x634 <DIO_u8GetPinValue+0x72>
 61a:	5c c0       	rjmp	.+184    	; 0x6d4 <DIO_u8GetPinValue+0x112>
 61c:	4e 81       	ldd	r20, Y+6	; 0x06
 61e:	5f 81       	ldd	r21, Y+7	; 0x07
 620:	42 30       	cpi	r20, 0x02	; 2
 622:	51 05       	cpc	r21, r1
 624:	79 f1       	breq	.+94     	; 0x684 <DIO_u8GetPinValue+0xc2>
 626:	8e 81       	ldd	r24, Y+6	; 0x06
 628:	9f 81       	ldd	r25, Y+7	; 0x07
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	91 05       	cpc	r25, r1
 62e:	09 f4       	brne	.+2      	; 0x632 <DIO_u8GetPinValue+0x70>
 630:	3d c0       	rjmp	.+122    	; 0x6ac <DIO_u8GetPinValue+0xea>
 632:	50 c0       	rjmp	.+160    	; 0x6d4 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
 634:	e9 e3       	ldi	r30, 0x39	; 57
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	88 2f       	mov	r24, r24
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a9 01       	movw	r20, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_u8GetPinValue+0x8a>
 648:	55 95       	asr	r21
 64a:	47 95       	ror	r20
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_u8GetPinValue+0x86>
 650:	ca 01       	movw	r24, r20
 652:	81 70       	andi	r24, 0x01	; 1
 654:	ec 81       	ldd	r30, Y+4	; 0x04
 656:	fd 81       	ldd	r31, Y+5	; 0x05
 658:	80 83       	st	Z, r24
 65a:	41 c0       	rjmp	.+130    	; 0x6de <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
 65c:	e6 e3       	ldi	r30, 0x36	; 54
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8GetPinValue+0xb2>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8GetPinValue+0xae>
 678:	ca 01       	movw	r24, r20
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	ec 81       	ldd	r30, Y+4	; 0x04
 67e:	fd 81       	ldd	r31, Y+5	; 0x05
 680:	80 83       	st	Z, r24
 682:	2d c0       	rjmp	.+90     	; 0x6de <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
 684:	e3 e3       	ldi	r30, 0x33	; 51
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8GetPinValue+0xda>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_u8GetPinValue+0xd6>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	19 c0       	rjmp	.+50     	; 0x6de <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
 6ac:	e0 e3       	ldi	r30, 0x30	; 48
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8GetPinValue+0x102>
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8GetPinValue+0xfe>
 6c8:	ca 01       	movw	r24, r20
 6ca:	81 70       	andi	r24, 0x01	; 1
 6cc:	ec 81       	ldd	r30, Y+4	; 0x04
 6ce:	fd 81       	ldd	r31, Y+5	; 0x05
 6d0:	80 83       	st	Z, r24
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 6de:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e0:	27 96       	adiw	r28, 0x07	; 7
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 6fa:	af e5       	ldi	r26, 0x5F	; 95
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	ef e5       	ldi	r30, 0x5F	; 95
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	80 68       	ori	r24, 0x80	; 128
 706:	8c 93       	st	X, r24
}
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 716:	af e5       	ldi	r26, 0x5F	; 95
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	ef e5       	ldi	r30, 0x5F	; 95
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	8f 77       	andi	r24, 0x7F	; 127
 722:	8c 93       	st	X, r24
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 732:	ea e3       	ldi	r30, 0x3A	; 58
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 738:	e7 e3       	ldi	r30, 0x37	; 55
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 73e:	e4 e3       	ldi	r30, 0x34	; 52
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
 746:	e1 e3       	ldi	r30, 0x31	; 49
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
 74c:	eb e3       	ldi	r30, 0x3B	; 59
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
 752:	e8 e3       	ldi	r30, 0x38	; 56
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
 758:	e5 e3       	ldi	r30, 0x35	; 53
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
 75e:	e2 e3       	ldi	r30, 0x32	; 50
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	10 82       	st	Z, r1
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <main>:
void ADCNotification (void);


u8 App_u8ADCReading;
void main (void)
{
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 772:	0e 94 95 03 	call	0x72a	; 0x72a <PORT_voidInit>

	ADC_voidInit();
 776:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>

	/*Enable global interrupts*/
	GIE_voidEnable();
 77a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GIE_voidEnable>
	while(1)
	{
		ADC_u8StartConversionAsynch(0,&App_u8ADCReading,&ADCNotification);
 77e:	25 e6       	ldi	r18, 0x65	; 101
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	48 ec       	ldi	r20, 0xC8	; 200
 784:	53 e0       	ldi	r21, 0x03	; 3
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	b9 01       	movw	r22, r18
 78a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_u8StartConversionAsynch>
 78e:	f7 cf       	rjmp	.-18     	; 0x77e <main+0x14>

00000790 <ADCNotification>:
	}
}

void ADCNotification (void)
{
 790:	df 93       	push	r29
 792:	cf 93       	push	r28
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortValue(DIO_u8PORTC,App_u8ADCReading);
 798:	90 91 65 00 	lds	r25, 0x0065
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	69 2f       	mov	r22, r25
 7a0:	0e 94 99 02 	call	0x532	; 0x532 <DIO_u8SetPortValue>
}
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
